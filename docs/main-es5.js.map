{"version":3,"sources":["webpack:///src/app/artist-discography/artist-discography.component.html","webpack:///src/app/artist-discography/artist-discography.component.ts","webpack:///src/app/about/about.component.ts","webpack:///src/app/about/about.component.html","webpack:///src/app/search-result/search-result.component.html","webpack:///src/app/search-result/search-result.component.ts","webpack:///src/environments/environment.ts","webpack:///src/app/view/view.component.ts","webpack:///src/app/view/view.component.html","webpack:///src/app/new-releases/new-releases.component.html","webpack:///src/app/new-releases/new-releases.component.ts","webpack:///src/app/favourites/favourites.component.html","webpack:///src/app/favourites/favourites.component.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/spotify-token.service.ts","webpack:///src/app/app.module.ts","webpack:///src/app/music-data.service.ts","webpack:///src/app/album/album.component.html","webpack:///src/app/album/album.component.ts","webpack:///src/app/not-found/not-found.component.ts","webpack:///src/app/not-found/not-found.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["ArtistDiscographyComponent","route","dataService","routeSub","params","subscribe","artistSub","getArtistById","id","data","artist","albumSub","getAlbumsByArtistId","dup","Set","newItems","items","albums","filter","album","duplicate","has","name","add","unsubscribe","AboutComponent","SearchResultComponent","queryParams","searchQuery","searchArtists","results","artists","item","images","length","environment","production","clientID","clientSecret","ViewComponent","NewReleasesComponent","getNewReleases","releases","FavouritesComponent","getFavourites","favourites","tracks","removeFromFavourites","AppComponent","router","title","navigate","q","searchString","handleSearch","SpotifyTokenService","http","o","auth","btoa","authBody","set","tokenSub","post","toString","headers","token","accessToken","access_token","accessTokenExpires","Date","setSeconds","getSeconds","expires_in","next","getAccessToken","AppModule","MusicDataService","spotifyToken","favouritesList","getBearerToken","pipe","get","Authorization","push","i","indexOf","splice","arr","join","AlbumComponent","snackbar","getAlbumById","trackId","result","addToFavourites","open","duration","NotFoundComponent","routes","path","component","redirectTo","pathMatch","AppRoutingModule","forRoot","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["<h1>{{ artist.name }}</h1>\n<p>\n  Full discography for {{ artist.name }}<br />\n  Click the <strong>album cover</strong> for more information.<br />\n</p>\n<mat-card\n  [style.background]=\"\n    'url(' + artist.images[0].url + ') no-repeat center center'\n  \"\n  [style.background-size]=\"'cover'\"\n  [style.height]=\"'450px'\"\n>\n</mat-card>\n<br /><br />\n<h1>Full Discography</h1>\n\n<div fxLayout=\"row wrap\" fxLayout.xs=\"column\">\n  <!-- Single \"Responsive\" Card-->\n  <div fxFlex [style.margin]=\"'20px'\" *ngFor=\"let album of albums\">\n    <mat-card [style.min-width]=\"'200px'\">\n      <mat-card-header>\n        <mat-card-title>{{ album.name }}</mat-card-title>\n        <mat-card-subtitle>Album Title</mat-card-subtitle>\n      </mat-card-header>\n\n      <img\n        mat-card-image\n        class=\"album-cover\"\n        [routerLink]=\"['/album', album.id]\"\n        routerLinkActive=\"active\"\n        [src]=\"album.images[0].url\"\n        alt=\"album art\"\n      />\n      <strong>Release Date: </strong>{{ album.release_date }}<br />\n      <strong>Tracks: </strong>{{ album.total_tracks }}\n    </mat-card>\n  </div>\n  <!-- -->\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { ActivatedRoute } from '@angular/router';\nimport { MusicDataService } from '../music-data.service';\n@Component({\n  selector: 'app-artist-discography',\n  templateUrl: './artist-discography.component.html',\n  styleUrls: ['./artist-discography.component.css'],\n})\nexport class ArtistDiscographyComponent implements OnInit {\n  albums;//= albumData.albums.items;\n  artist;// = (artistData as any).default;\n  artistSub: any;\n  routeSub: any;\n  albumSub: any;\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: MusicDataService\n  ) {}\n\n  ngOnInit(): void {\n    this.routeSub = this.route.params.subscribe((params) => {\n      this.artistSub = this.dataService\n        .getArtistById(params.id)\n        .subscribe((data) => (this.artist = data));\n      this.albumSub = this.dataService\n        .getAlbumsByArtistId(params.id)\n        .subscribe((data) => {\n          const dup=new Set();\n          let newItems = data.items;\n          this.albums=newItems.filter(\n           // (item, index) => newItems.indexOf(item) === index\n           (album: { name: unknown }) => {\n            const duplicate = dup.has(album.name);\n            dup.add(album.name);\n            return !duplicate;\n          }\n         \n          );\n          \n        });\n    });\n  }\n  ngOnDestroy(): void {\n    this.artistSub.unsubscribe();\n    this.albumSub.unsubscribe();\n    this.routeSub.unsubscribe();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.css']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h4>All about me - Ye Jin Kim</h4>\n<p> My name is Ye Jin Kim.<br>\n    I am currently in my fourth semester in\n    the Computer Programming & Analysis program and working towards an\n    Advanced Diploma at Seneca College. <br>\n    This is my assignment of WEB 422 course. For this assignment, I used\n    Angular!</p>","<div *ngIf=\"searchQuery\">\n  <h1>Results for: \"{{ searchQuery }}\"</h1>\n  <p>\n    The following is a list of artists matching the query.<br />\n    Click the <strong>artist image</strong> for more information.\n  </p>\n\n  <br />\n\n  <div class=\"content\">\n    <div fxLayout=\"row wrap\" fxLayout.xs=\"column\">\n      <!-- single result \"card\"-->\n      <div *ngFor=\"let artist of results\">\n        <div fxFlex [style.margin]=\"'20px'\">\n          <mat-card [style.min-width]=\"'200px'\">\n            <mat-card-header>\n              <mat-card-title>{{ artist.name }}</mat-card-title>\n              <mat-card-subtitle>Artist</mat-card-subtitle>\n            </mat-card-header>\n            <div *ngIf=\"artist.images\">\n              <img\n                routerLink=\"/artist/{{ artist.id }}\"\n                mat-card-image\n                class=\"album-cover\"\n                src=\"{{ artist.images[2].url }}\"\n                alt=\"artist art\"\n              />\n            </div>\n            <mat-card-content>\n              <strong>Followers: </strong>{{ artist.followers.total }}<br />\n              <strong>Popularity: </strong>{{ artist.popularity }}\n            </mat-card-content>\n          </mat-card>\n        </div>\n      </div>\n      <!-- -->\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { MusicDataService } from '../music-data.service';\n@Component({\n  selector: 'app-search-result',\n  templateUrl: './search-result.component.html',\n  styleUrls: ['./search-result.component.css'],\n})\nexport class SearchResultComponent implements OnInit {\n  results: any;\n  searchQuery: any;\n  routeSub: any;\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: MusicDataService\n  ) {}\n\n  ngOnInit(): void {\n    this.routeSub = this.route.queryParams.subscribe((params) => {\n      this.searchQuery = params['q'];\n    });\n    this.dataService.searchArtists(this.searchQuery).subscribe((data) => {\n      this.results = data.artists.items.filter(\n        (item:any) => item.images.length > 0\n      );\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  clientID: \"41129a3794ad455eae8f54e61f70e8de\",\n  clientSecret: \"0adbad34e43e4da79f8b66402bf4f3a6\"\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-view',\n  templateUrl: './view.component.html',\n  styleUrls: ['./view.component.css']\n})\nexport class ViewComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>view works!</p>\n","<div class=\"content\">\n  <h1>New Releases</h1>\n  <p>\n    The following is a list of new releases.<br />\n    Click the <strong>album cover</strong> or <strong>artist name</strong> for\n    more information. <br />\n  </p>\n\n  <div fxLayout=\"row wrap\" fxLayout.xs=\"column\">\n    <!-- Single \"Responsive\" Card-->\n    <div fxFlex [style.margin]=\"'20px'\" *ngFor=\"let album of releases\">\n      <mat-card [style.min-width]=\"'200px'\">\n        <mat-card-header>\n          <mat-card-title>{{ album.name }}</mat-card-title>\n          <mat-card-subtitle>New Release</mat-card-subtitle>\n        </mat-card-header>\n       \n        <img\n          [routerLink]=\"['/album', album.id]\"\n          routerLinkActive=\"active\"\n          mat-card-image\n          class=\"album-cover\"\n          [src]=\"album.images[0].url\"\n          alt=\"album art\"\n        />\n        <strong>Release Date: </strong>{{ album.release_date }}<br />\n        <strong>Tracks: </strong>{{ album.total_tracks }}<br /><br />\n        <mat-card-content>\n          <mat-chip-list aria-label=\"Artist selection\">\n            <mat-chip\n              [routerLink]=\"['/artist', artist.id]\"\n              routerLinkActive=\"active\"\n              *ngFor=\"let artist of album.artists\"\n              >{{ artist.name }}</mat-chip\n            >\n          </mat-chip-list>\n        </mat-card-content>\n      </mat-card>\n    </div>\n    <!-- -->\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\nimport { MusicDataService } from '../music-data.service';\n\n@Component({\n  selector: 'app-new-releases',\n  templateUrl: './new-releases.component.html',\n  styleUrls: ['./new-releases.component.css'],\n})\nexport class NewReleasesComponent implements OnInit {\n  releases: Array<object>;\n\n  constructor(private dataService: MusicDataService) {}\n\n  ngOnInit(): void {\n    this.dataService.getNewReleases().subscribe((data) => {\n      this.releases = data.albums.items;\n    });\n  }\n}\n","<h1>Favourites</h1>\n<p>\n  The following is a list of your favourite songs from various artists.<br />\n  Click the &nbsp;<mat-icon mat-list-icon>queue_music</mat-icon>&nbsp; icon to\n  <strong>remove</strong> a song from your list\n</p>\n\n<br />\n\n<mat-list>\n  <!-- single \"favourite\" card -->\n  <mat-list-item *ngFor=\"let track of favourites\">\n    <mat-icon mat-list-icon (click)=\"removeFromFavourites(track.id)\">queue_music</mat-icon>\n    <div mat-line>\n      <mat-card>\n        <mat-card-content\n          ><strong>{{ track.name }}</strong> - {{ track.duration }}<br /><br />\n          Artist(s):\n          <span *ngFor=\"let artist of track.artists\"\n            ><a routerLink=\"/artist/{{ artist.id }}\">{{ artist.name }}</a\n            >&nbsp;&nbsp;</span\n          >\n\n          <br />\n\n          Album:\n          <a routerLink=\"/album{{ track.album.id }}\"> {{ track.album.name }}</a\n          ><br />\n          <div *ngIf=\"track.preview_url\">\n            <br /><audio controls [src]=\"track.preview_url\"></audio>\n          </div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </mat-list-item>\n  <!-- -->\n</mat-list>\n","import { Component, OnInit } from '@angular/core';\nimport { MusicDataService } from '../music-data.service';\n\n@Component({\n  selector: 'app-favourites',\n  templateUrl: './favourites.component.html',\n  styleUrls: ['./favourites.component.css'],\n})\nexport class FavouritesComponent implements OnInit {\n  favourites!: Array<any>;\n  constructor(private dataService: MusicDataService) {}\n\n  ngOnInit(): void {\n    this.dataService.getFavourites().subscribe((data) => {\n      this.favourites = data.tracks;\n    });\n  }\n\n  removeFromFavourites(id) {\n    this.dataService.removeFromFavourites(id).subscribe((data) => {\n      this.favourites = data.tracks;\n    });\n  }\n}\n","/*********************************************************************************\n *  WEB422 – Assignment 05\n *  I declare that this assignment is my own work in accordance with Seneca  Academic Policy.  No part of this\n *  assignment has been copied manually or electronically from any other source (including web sites) or\n *  distributed to other students.\n *\n *  Name: Ye Jin Kim Student ID: 163291180 Date: 3/25/2021\n *\n ********************************************************************************/\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'web422-a5';\n  searchString!: string;\n\n  constructor(private router: Router) {}\n\n  handleSearch() {\n    this.router.navigate(['/search'], {\n      queryParams: { q: this.searchString },\n    });\n    this.searchString = '';\n  }\n}\n","<!--https://pat-crawford-sdds.netlify.app/shared/winter-2021/web422/A4/app.component.html.txt-->\n\n<div class=\"navbar-container\">\n\n  <!-- Top navbar -->\n  <mat-toolbar class=\"navbar\" color=\"primary\">\n\n    <button mat-icon-button (click)=\"snav.toggle()\">\n      <mat-icon>menu</mat-icon>\n    </button>\n\n    <a class=\"navbar-brand\" matTooltip=\"Home\">\n      <h1>\n        Seneca Music\n      </h1>\n    </a>\n\n    <span class=\"navbar-spacer\"></span>\n\n    <button mat-button [matMenuTriggerFor]=\"userMenu\">\n      <mat-icon>person</mat-icon>\n      <span fxShow fxHide.xs>\n        Ye Jin Kim\n      </span>\n    </button>\n    <mat-menu #userMenu=\"matMenu\" xPosition=\"before\" yPosition=\"above\" [overlapTrigger]=\"false\">\n\n      <a mat-menu-item>\n        <mat-icon>exit_to_app</mat-icon>\n        <span>Log out</span>\n      </a>\n\n    </mat-menu>\n\n  </mat-toolbar>\n\n  <mat-sidenav-container>\n    <!-- Side nav -->\n    <mat-sidenav #snav [opened]=\"false\" [mode]=\"'side'\" [fixedInViewport]=\"true\" fixedTopGap=\"56\">\n\n      <mat-nav-list>\n        <div>\n          <mat-form-field appearance=\"fill\">\n            <mat-label>Artist</mat-label>\n            <form (ngSubmit)='handleSearch()'><input matInput type=\"text\" name=\"searchString\"\n              [(ngModel)]='searchString'></form>\n            <mat-icon matSuffix>search</mat-icon>\n          </mat-form-field>\n        </div>\n\n\n        <a mat-list-item routerLink=\"/newReleases\"routerLinkActive=\"activeRoute\">\n          <mat-icon mat-list-icon>\n            library_music\n          </mat-icon>\n          <p mat-line> New Releases </p>\n        </a>\n\n        <a mat-list-item routerLinkActive=\"active\" [routerLink]=\"['favourites']\">\n          <mat-icon mat-list-icon>\n            favorite\n          </mat-icon>\n          <p mat-line> Favourites </p>\n        </a>\n\n        <mat-divider></mat-divider>\n\n        <a id=\"push-bottom\" mat-list-item routerLink=\"/about\"routerLinkActive=\"activeRoute\">\n          <mat-icon mat-list-icon>\n            info_outline\n          </mat-icon>\n          <p mat-line> About </p>\n        </a>\n      </mat-nav-list>\n\n    </mat-sidenav>\n    \n    <mat-sidenav-content class=\"sidenav-content\">\n      \n      <!-- Main content -->\n      <router-outlet></router-outlet> \n      <!-- ------------ -->\n      \n      <div class=\"bottom-spacer\"></div>\n    </mat-sidenav-content>\n  </mat-sidenav-container>\n</div>","import { Injectable, OnDestroy } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { environment } from './../environments/environment';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SpotifyTokenService implements OnDestroy {\n\n  private clientID = environment.clientID;\n  private clientSecret = environment.clientSecret;\n\n  private accessToken: string;\n  private accessTokenExpires: Date;\n  private tokenSub: any;\n\n  constructor(private http: HttpClient) { }\n\n  private getAccessToken(): Observable<any> {\n\n    return new Observable(o => {\n      let auth = btoa(`${this.clientID}:${this.clientSecret}`);\n      const authBody = new HttpParams().set('grant_type', 'client_credentials');\n\n      this.tokenSub = this.http.post<any>(\"https://accounts.spotify.com/api/token\", authBody.toString(), { headers: { 'Content-Type': 'application/x-www-form-urlencoded', 'Authorization': `Basic ${auth}` } }).subscribe(token => {\n        this.accessToken = token.access_token;\n        this.accessTokenExpires = new Date();\n        this.accessTokenExpires.setSeconds(this.accessTokenExpires.getSeconds() + token.expires_in);\n        o.next(this.accessToken)\n      });\n    });\n  }\n\n  getBearerToken(): Observable<any> {\n\n    if (!this.accessToken) { \n      // no access token, so get a fresh one\n      return this.getAccessToken();\n    } else { \n      if (new Date() < this.accessTokenExpires) { \n        // access token exists and is valid, so return it\n        return new Observable(o => o.next(this.accessToken));\n      } else { \n        // access token exists, but is no longer valid, so get a fresh one\n        return this.getAccessToken(); \n      }\n    }\n  }\n\n  ngOnDestroy():void{\n    this.tokenSub?.unsubscribe();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { MatListModule } from '@angular/material/list';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatChipsModule } from '@angular/material/chips';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { ViewComponent } from './view/view.component';\nimport { AboutComponent } from './about/about.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { NewReleasesComponent } from './new-releases/new-releases.component';\nimport { AlbumComponent } from './album/album.component';\nimport { ArtistDiscographyComponent } from './artist-discography/artist-discography.component';\n\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { SearchResultComponent } from './search-result/search-result.component';\nimport { FavouritesComponent } from './favourites/favourites.component';\n\n@NgModule({\n  declarations: [AppComponent, ViewComponent, AboutComponent, NotFoundComponent, NewReleasesComponent, AlbumComponent, ArtistDiscographyComponent, SearchResultComponent, FavouritesComponent],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatIconModule,\n    MatSidenavModule,\n    MatProgressBarModule,\n    MatMenuModule,\n    MatToolbarModule,\n    MatListModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatChipsModule,\n    FlexLayoutModule,\n    HttpClientModule,\n    FormsModule,\n    MatSnackBarModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\nimport { SpotifyTokenService } from './spotify-token.service';\n\nimport { mergeMap } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MusicDataService {\n  private favouritesList: Array<any> = [];\n\n  constructor(\n    private spotifyToken: SpotifyTokenService,\n    private http: HttpClient\n  ) {}\n\n  getNewReleases(): Observable<any> {\n    return this.spotifyToken.getBearerToken().pipe(\n      mergeMap((token) => {\n        return this.http.get<any>(\n          'https://api.spotify.com/v1/browse/new-releases',\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      })\n    );\n  }\n\n  getArtistById(id: string): Observable<any> {\n    return this.spotifyToken.getBearerToken().pipe(\n      mergeMap((token) => {\n        return this.http.get<any>(\n          `https://api.spotify.com/v1/artists/${id}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      })\n    );\n   \n  }\n\n  getAlbumsByArtistId(id: string): Observable<any> {\n    return this.spotifyToken.getBearerToken().pipe(\n      mergeMap((token) => {\n        return this.http.get<any>(\n          `https://api.spotify.com/v1/artists/${id}/albums?include_groups=album,single&limit=50`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      })\n    );\n    // return this.http.get<any>(\n    //   `https://api.spotify.com/v1/artists/${id}/albums?include_groups=album,single&limit=50`\n    // );\n  }\n\n  getAlbumById(id: string): Observable<any> {\n    return this.spotifyToken.getBearerToken().pipe(\n      mergeMap((token) => {\n        return this.http.get<any>(\n          `https://api.spotify.com/v1/albums/${id}`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      })\n    );\n   // return this.http.get<any>(`https://api.spotify.com/v1/albums/${id}`);\n  }\n\n  searchArtists(searchString: string): Observable<any> {\n    return this.spotifyToken.getBearerToken().pipe(\n      mergeMap((token) => {\n        return this.http.get<any>(\n          `https://api.spotify.com/v1/search/?q=${searchString}&type=artist&limit=50`,\n          { headers: { Authorization: `Bearer ${token}` } }\n        );\n      })\n    );\n    // return this.http.get<any>(\n    //   `https://api.spotify.com/v1/search/?q=${searchString}&type=artist&limit=50`\n    // );\n  }\n\n  addToFavourites(id: string) {\n    if (id == null || !id || this.favouritesList.length >= 50) {\n      return false;\n    }\n    this.favouritesList.push(id);\n    return true;\n  }\n\n  removeFromFavourites(id: string): Observable<any> {\n    var i = this.favouritesList.indexOf(id);\n    this.favouritesList.splice(i, 1);\n    return this.getFavourites();\n  }\n\n  getFavourites(): Observable<any> {\n    var arr = this.favouritesList.join();\n    if (this.favouritesList.length > 0) {\n      return this.spotifyToken.getBearerToken().pipe(\n        mergeMap((token) => {\n          return this.http.get<any>(\n            `https://api.spotify.com/v1/tracks?ids=${arr}`,\n            { headers: { Authorization: `Bearer ${token}` } }\n          );\n        })\n      );\n      //return this.http.get<any>(`https://api.spotify.com/v1/tracks?ids=${arr}`);\n    } else if (this.favouritesList.length <= 0) {\n      return new Observable((o) => {\n        o.next([]);\n      });\n    }\n  }\n}\n","<h1>{{ album.name }}</h1>\n<p>Full track listing for {{ album.name }}<br />\nClick the <mat-icon mat-list-icon>queue_music</mat-icon> icon to <strong>add</strong> a song from your favourites list</p>\n\n<mat-card>\n  <mat-card-content fxLayout=\"row wrap\" fxLayout.xs=\"column\">\n    <div fxflex>\n      <img\n        [src]=\"album.images[1].url\"\n        alt=\"album cover\"\n        [style.margin]=\"'10px'\"\n        [style.max-width]=\"'90%'\"\n      />\n    </div>\n    <div fxFlex>\n      <div [style.min-width]=\"'300px'\" [style.margin]=\"'10px'\">\n        <strong>Record Label: </strong> {{ album.label }}<br />\n        <strong>Release Date: </strong> {{ album.release_date }}<br /><br />\n        <strong>Tracks:</strong> {{ album.total_tracks }}<br />\n        <strong>Popularity: </strong>{{ album.popularity }}<br /><br />\n\n        <mat-chip-list aria-label=\"Artist selection\">\n          <mat-chip\n            [routerLink]=\"['/artist', artist.id]\"\n            routerLinkActive=\"active\"\n            *ngFor=\"let artist of album.artists\"\n            >{{ artist.name }}</mat-chip\n          >\n        </mat-chip-list>\n        <br />\n\n        <div *ngFor=\"let copyright of album.copyrights\">\n          {{ copyright.text }}\n        </div>\n      </div>\n    </div>\n  </mat-card-content>\n</mat-card>\n<br /><br />\n<h2>Track Listing</h2>\n\n<mat-list>\n  <!-- Single \"Responsive\" Material List Item-->\n  <mat-list-item *ngFor=\"let track of album.tracks.items\">\n    <mat-icon mat-list-icon (click)=\"addToFavourites(track.id)\">queue_music</mat-icon>\n    <div mat-line>\n      <mat-card>\n        <mat-card-content>\n          {{ track.track_number }}: {{ track.name }} -\n          {{ (track.duration_ms / 60000).toFixed(2) }}\n          <!-- NOTE 3.34 was determined by using (duration_ms / 60000).toFixed(2) -->\n          <div *ngIf=\"track.preview_url\"><br /><audio controls [src]=\"track.preview_url\"></audio></div>\n        </mat-card-content>\n      </mat-card>\n    </div>\n  </mat-list-item>\n  <!-- -->\n</mat-list>\n","import { Component, OnInit } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { ActivatedRoute } from '@angular/router';\nimport { MusicDataService } from '../music-data.service';\n@Component({\n  selector: 'app-album',\n  templateUrl: './album.component.html',\n  styleUrls: ['./album.component.css'],\n})\nexport class AlbumComponent implements OnInit {\n  album: any; // = (data as any).default;\n  routeSub: any;\n  albumSub: any;\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: MusicDataService,\n    private snackbar: MatSnackBar\n  ) {}\n\n  ngOnInit(): void {\n    this.routeSub = this.route.params.subscribe((params) => {\n      this.albumSub = this.dataService\n        .getAlbumById(params.id)\n        .subscribe((data) => {\n          this.album = data;\n        });\n    });\n  }\n  addToFavourites(trackId) {\n    let result = this.dataService.addToFavourites(trackId);\n    if (result) {\n      this.snackbar.open('Adding to Favourites...', 'Done', { duration: 1500 });\n      //console.log(trackId);\n    }\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<h4>Not found</h4>\n<p>This is the \"404 Page\" of the application.</p>","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { AboutComponent } from './about/about.component';\nimport { AlbumComponent } from './album/album.component';\nimport { ArtistDiscographyComponent } from './artist-discography/artist-discography.component';\nimport { FavouritesComponent } from './favourites/favourites.component';\nimport { NewReleasesComponent } from './new-releases/new-releases.component';\nimport { NotFoundComponent } from './not-found/not-found.component';\nimport { SearchResultComponent } from './search-result/search-result.component';\n\nconst routes: Routes = [\n  {path: \"newReleases\", component:NewReleasesComponent},\n  {path:\"artist/:id\", component:ArtistDiscographyComponent},\n  {path:\"album/:id\", component:AlbumComponent},\n  {path: \"about\", component: AboutComponent},\n  {path: \"search\", component: SearchResultComponent},\n  {path: \"favourites\", component: FavouritesComponent},\n  {path: \"\", redirectTo: \"/newReleases\", pathMatch: \"full\"},\n  {path: \"**\", component:NotFoundComponent},\n\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}